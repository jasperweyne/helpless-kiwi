# Editted
parameters:
    # Adds a fallback DATABASE_URL if the env var is not set.
    # This allows you to run cache:warmup even if your
    # environment variables are not available yet.
    # You should not need to change this value.
    env(SECURE_SCHEME): 'https'

security:
    encoders:
        App\Entity\Security\LocalAccount:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            id: App\Security\OAuth2UserProvider
        app_local_user_provider:
            id: App\Security\LocalUserProvider
        all_users:
            chain:
                providers: ['app_local_user_provider', 'app_user_provider']
            
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: all_users
            guard:
                entry_point: App\Security\OAuth2Authenticator
                authenticators:
                    - App\Security\LocalAuthenticator
                    - App\Security\OAuth2Authenticator
            logout:
                path:   app_logout
                handlers: [App\Security\OAuth2UserProvider]
                success_handler: App\Security\OAuth2UserProvider
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                always_remember_me: true
                name: KIWI_REMEMBERME

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, allow_if: "has_role('ROLE_ADMIN') and is_fully_authenticated()", requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/profile, roles: ROLE_USER, requires_channel: '%env(SECURE_SCHEME)%' }
        - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: '%env(SECURE_SCHEME)%' }

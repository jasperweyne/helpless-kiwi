# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    # Adds a environment variables even if Bunny is not used.
    # This allows you to run cache:warmup even if your
    # environment variables are not available.
    # You should not need to change this value.
    env(BUNNY_ID): ''
    env(BUNNY_SECRET): ''
    env(BUNNY_ADDRESS): ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Migrations/'
            - '../src/Tests/'
            - '../src/Kernel.php'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    #Editted
    App\Template\AnnotationMenuExtension:
        class: App\Template\AnnotationMenuExtension
        arguments: ["App\\Controller", "../src/Controller", "%kernel.root_dir%", "@annotation_reader"]

    App\Log\Doctrine\EntityEventListener:
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    App\DataCollector\AuthSecurityDataCollector:
        decorates: data_collector.security

    App\EventListener\DoctrineTablePrefixListener:
        arguments: ["kiwi_"]
        tags:
            - { name: doctrine.event_listener, event: loadClassMetadata }

    App\Template\MenuBuilder:
        arguments:
            - !tagged app.menu_extension

    App\Provider\Person\PersonRegistry:
        arguments:
            - !tagged app.person_provider

    _instanceof:
        App\Template\MenuExtensionInterface:
            tags: ['app.menu_extension']
        App\Provider\Person\PersonProviderInterface:
            tags: ['app.person_provider']

    OpenIDConnectClient\OpenIDConnectProvider:
        arguments:
            -
                clientId: '%env(BUNNY_ID)%'         # The client ID assigned to you by the provider
                clientSecret: '%env(BUNNY_SECRET)%' # The client password assigned to you by the provider
                redirectUri: '@=service("router").generate("app_login", [], 0)' # 0: ABSOLUTE_URL (see UrlGeneratorInterface)
                urlAuthorize: '%env(SECURE_SCHEME)%://%env(BUNNY_ADDRESS)%/authorize'
                urlAccessToken: '%env(SECURE_SCHEME)%://%env(BUNNY_ADDRESS)%/token'
                urlResourceOwnerDetails: '%env(SECURE_SCHEME)%://%env(BUNNY_ADDRESS)%/resource'
                idTokenIssuer: 'https://%env(BUNNY_ADDRESS)%'
                publicKey: 'file://%kernel.project_dir%/public.key'
                scopes: 'profile email admin'
            -
                signer: '@Lcobucci\JWT\Signer\Rsa\Sha256'